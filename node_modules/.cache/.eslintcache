[{"/home/arcturian/amm/src/index.js":"1","/home/arcturian/amm/src/reportWebVitals.js":"2","/home/arcturian/amm/src/components/App.js":"3","/home/arcturian/amm/src/store/store.js":"4","/home/arcturian/amm/src/components/Navigation.js":"5","/home/arcturian/amm/src/components/Tabs.js":"6","/home/arcturian/amm/src/components/Swap.js":"7","/home/arcturian/amm/src/components/Deposit.js":"8","/home/arcturian/amm/src/components/Withdraw.js":"9","/home/arcturian/amm/src/components/Charts.js":"10","/home/arcturian/amm/src/store/interactions.js":"11","/home/arcturian/amm/src/store/reducers/provider.js":"12","/home/arcturian/amm/src/store/reducers/tokens.js":"13","/home/arcturian/amm/src/store/reducers/amm.js":"14","/home/arcturian/amm/src/components/Alert.js":"15","/home/arcturian/amm/src/components/Charts.config.js":"16","/home/arcturian/amm/src/components/Loading.js":"17","/home/arcturian/amm/src/store/selectors.js":"18"},{"size":715,"mtime":1662755849000,"results":"19","hashOfConfig":"20"},{"size":362,"mtime":1662755849000,"results":"21","hashOfConfig":"20"},{"size":5538,"mtime":1695094064996,"results":"22","hashOfConfig":"20"},{"size":363,"mtime":1662755849000,"results":"23","hashOfConfig":"20"},{"size":2757,"mtime":1694655024379,"results":"24","hashOfConfig":"20"},{"size":629,"mtime":1662755849000,"results":"25","hashOfConfig":"20"},{"size":7558,"mtime":1693527801459,"results":"26","hashOfConfig":"20"},{"size":5760,"mtime":1693527851615,"results":"27","hashOfConfig":"20"},{"size":4093,"mtime":1693527881723,"results":"28","hashOfConfig":"20"},{"size":2926,"mtime":1662755849000,"results":"29","hashOfConfig":"20"},{"size":6727,"mtime":1695087047197,"results":"30","hashOfConfig":"20"},{"size":564,"mtime":1662755849000,"results":"31","hashOfConfig":"20"},{"size":564,"mtime":1692161170159,"results":"32","hashOfConfig":"20"},{"size":3410,"mtime":1695085901692,"results":"33","hashOfConfig":"20"},{"size":552,"mtime":1662755849000,"results":"34","hashOfConfig":"20"},{"size":546,"mtime":1662755849000,"results":"35","hashOfConfig":"20"},{"size":269,"mtime":1662755849000,"results":"36","hashOfConfig":"20"},{"size":1218,"mtime":1662755849000,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"zl16v2",{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"41"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"41"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"41"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"/home/arcturian/amm/src/index.js",[],[],[],"/home/arcturian/amm/src/reportWebVitals.js",[],[],"/home/arcturian/amm/src/components/App.js",["96","97","98","99","100","101","102","103","104","105","106","107","108"],[],"/home/arcturian/amm/src/store/store.js",[],[],"/home/arcturian/amm/src/components/Navigation.js",[],[],"/home/arcturian/amm/src/components/Tabs.js",[],[],"/home/arcturian/amm/src/components/Swap.js",["109"],[],"import { useState, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport Card from 'react-bootstrap/Card';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Spinner from 'react-bootstrap/Spinner';\nimport { ethers } from 'ethers'\n\nimport Alert from './Alert'\n\nimport {\n  swap,\n  loadBalances\n} from '../store/interactions'\n\nconst Swap = () => {\n  const [inputToken, setInputToken] = useState(null)\n  const [outputToken, setOutputToken] = useState(null)\n  const [inputAmount, setInputAmount] = useState(0)\n  const [outputAmount, setOutputAmount] = useState(0)\n\n  const [price, setPrice] = useState(0)\n\n  const [showAlert, setShowAlert] = useState(false)\n\n  const provider = useSelector(state => state.provider.connection)\n  const account = useSelector(state => state.provider.account)\n\n  const tokens = useSelector(state => state.tokens.contracts)\n  const symbols = useSelector(state => state.tokens.symbols)\n  const balances = useSelector(state => state.tokens.balances)\n\n  const amm = useSelector(state => state.amm.contract)\n  const isSwapping = useSelector(state => state.amm.swapping.isSwapping)\n  const isSuccess = useSelector(state => state.amm.swapping.isSuccess)\n  const transactionHash = useSelector(state => state.amm.swapping.transactionHash)\n\n  const dispatch = useDispatch()\n\n  const inputHandler = async (e) => {\n    if (!inputToken || !outputToken) {\n      window.alert('Please select token')\n      return\n    }\n\n    if (inputToken === outputToken) {\n      window.alert('Invalid token pair')\n      return\n    }\n\n    if (inputToken === 'DAPP') {\n      setInputAmount(e.target.value)\n\n      const _token1Amount = ethers.utils.parseUnits(e.target.value, 'ether')\n      const result = await amm.calculateToken1Swap(_token1Amount)\n      const _token2Amount = ethers.utils.formatUnits(result.toString(), 'ether')\n\n      setOutputAmount(_token2Amount.toString())\n\n    } else {\n      setInputAmount(e.target.value)\n\n      const _token2Amount = ethers.utils.parseUnits(e.target.value, 'ether')\n      const result = await amm.calculateToken2Swap(_token2Amount)\n      const _token1Amount = ethers.utils.formatUnits(result.toString(), 'ether')\n\n      setOutputAmount(_token1Amount.toString())\n    }\n\n  }\n\n  const swapHandler = async (e) => {\n    e.preventDefault()\n\n    setShowAlert(false)\n\n    if (inputToken === outputToken) {\n      window.alert('Invalid Token Pair')\n      return\n    }\n\n    const _inputAmount = ethers.utils.parseUnits(inputAmount, 'ether')\n\n    // Swap token depending upon which one we're doing...\n    if (inputToken === \"DAPP\") {\n      await swap(provider, amm, tokens[0], inputToken, _inputAmount, dispatch)\n    } else {\n      await swap(provider, amm, tokens[1], inputToken, _inputAmount, dispatch)\n    }\n\n    await loadBalances(amm, tokens, account, dispatch)\n    await getPrice()\n\n    setShowAlert(true)\n\n  }\n\n  const getPrice = async () => {\n    if (inputToken === outputToken) {\n      setPrice(0)\n      return\n    }\n\n    if (inputToken === 'DAPP') {\n      setPrice(await amm.token2Balance() / await amm.token1Balance())\n    } else {\n      setPrice(await amm.token1Balance() / await amm.token2Balance())\n    }\n  }\n\n  useEffect(() => {\n    if(inputToken && outputToken) {\n      getPrice()\n    }\n  }, [inputToken, outputToken]);\n\n  return (\n    <div>\n      <Card style={{ maxWidth: '450px' }} className='mx-auto px-4'>\n        {account ? (\n          <Form onSubmit={swapHandler} style={{ maxWidth: '450px', margin: '50px auto' }}>\n\n            <Row className='my-3'>\n              <div className='d-flex justify-content-between'>\n                <Form.Label><strong>Input:</strong></Form.Label>\n                <Form.Text muted>\n                  Balance: {\n                    inputToken === symbols[0] ? (\n                      parseFloat(balances[0]).toFixed(2)\n                    ) : inputToken === symbols[1] ? (\n                      parseFloat(balances[1]).toFixed(2)\n                    ) : 0\n                  }\n                </Form.Text>\n              </div>\n              <InputGroup>\n                <Form.Control\n                  type=\"number\"\n                  placeholder=\"0.0\"\n                  min=\"0.0\"\n                  step=\"any\"\n                  onChange={(e) => inputHandler(e) }\n                  disabled={!inputToken}\n                />\n                <DropdownButton\n                  variant=\"outline-secondary\"\n                  title={inputToken ? inputToken : \"Select Token\"}\n                >\n                  <Dropdown.Item onClick={(e) => setInputToken(e.target.innerHTML)} >DAPP</Dropdown.Item>\n                  <Dropdown.Item onClick={(e) => setInputToken(e.target.innerHTML)} >USD</Dropdown.Item>\n                </DropdownButton>\n              </InputGroup>\n            </Row>\n\n            <Row className='my-4'>\n              <div className='d-flex justify-content-between'>\n                <Form.Label><strong>Output:</strong></Form.Label>\n                <Form.Text muted>\n                  Balance: {\n                    outputToken === symbols[0] ? (\n                      parseFloat(balances[0]).toFixed(2)\n                    ) : outputToken === symbols[1] ? (\n                      parseFloat(balances[1]).toFixed(2)\n                    ) : 0\n                  }\n                </Form.Text>\n              </div>\n              <InputGroup>\n                <Form.Control\n                  type=\"number\"\n                  placeholder=\"0.0\"\n                  value={outputAmount === 0 ? \"\" : outputAmount }\n                  disabled\n                />\n                <DropdownButton\n                  variant=\"outline-secondary\"\n                  title={outputToken ? outputToken : \"Select Token\"}\n                >\n                  <Dropdown.Item onClick={(e) => setOutputToken(e.target.innerHTML)}>DAPP</Dropdown.Item>\n                  <Dropdown.Item onClick={(e) => setOutputToken(e.target.innerHTML)}>USD</Dropdown.Item>\n                </DropdownButton>\n              </InputGroup>\n            </Row>\n\n            <Row className='my-3'>\n              {isSwapping ? (\n                <Spinner animation=\"border\" style={{ display: 'block', margin: '0 auto' }} />\n              ): (\n                <Button type='submit'>Swap</Button>\n              )}\n\n              <Form.Text muted>\n                Exchange Rate: {price}\n              </Form.Text>\n            </Row>\n\n          </Form>\n\n        ) : (\n          <p\n            className='d-flex justify-content-center align-items-center'\n            style={{ height: '300px' }}\n          >\n            Please connect wallet.\n          </p>\n        )}\n      </Card>\n\n      \n      {isSwapping ? (\n        <Alert\n          message={'Swap Pending...'}\n          transactionHash={null}\n          variant={'info'}\n          setShowAlert={setShowAlert}\n        />\n      ) : isSuccess && showAlert ? (\n        <Alert\n          message={'Swap Successful'}\n          transactionHash={transactionHash}\n          variant={'success'}\n          setShowAlert={setShowAlert}\n        />\n      ) : !isSuccess && showAlert ? (\n        <Alert\n          message={'Swap Failed'}\n          transactionHash={null}\n          variant={'danger'}\n          setShowAlert={setShowAlert}\n        />\n      ) : (\n        <></>\n      )}\n\n    </div>\n  );\n}\n\nexport default Swap;\n","/home/arcturian/amm/src/components/Deposit.js",["110","111","112","113"],[],"import { useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport Card from 'react-bootstrap/Card';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Spinner from 'react-bootstrap/Spinner';\nimport { ethers } from 'ethers'\n\nimport Alert from './Alert'\n\nimport {\n  addLiquidity,\n  loadBalances\n} from '../store/interactions'\n\nconst Deposit = () => {\n  const [token1Amount, setToken1Amount] = useState(0)\n  const [token2Amount, setToken2Amount] = useState(0)\n  const [showAlert, setShowAlert] = useState(false)\n\n  const [token1Final, setToken1Final] = useState(0)\n  const [token2Final, setToken2Final] = useState(0)\n\n  const provider = useSelector(state => state.provider.connection)\n  const account = useSelector(state => state.provider.account)\n\n  const tokens = useSelector(state => state.tokens.contracts)\n  const symbols = useSelector(state => state.tokens.symbols)\n  const balances = useSelector(state => state.tokens.balances)\n\n  const amm = useSelector(state => state.amm.contract)\n  const isDepositing = useSelector(state => state.amm.depositing.isDepositing)\n  const isSuccess = useSelector(state => state.amm.depositing.isSuccess)\n  const transactionHash = useSelector(state => state.amm.depositing.transactionHash)\n  const dispatch = useDispatch()\n\n  const loadBlockchainData = async () => {\n\n      let token1Balance = await amm.token1Balance()\n      token1Balance = ethers.utils.formatUnits(token1Balance, 18)\n\n      setToken1Final(token1Balance)\n      console.log(await amm.token1Balance())\n  }\n\n  const amountHandler = async (e) => {\n    if (e.target.id === 'token1') {\n      setToken1Amount(e.target.value)\n\n      // Fetch value from chain\n      const _token1Amount = ethers.utils.parseUnits(e.target.value, 'ether')\n      const result = await amm.calculateToken2Deposit(_token1Amount)\n      const _token2Amount = ethers.utils.formatUnits(result.toString(), 'ether')\n\n      setToken2Amount(_token2Amount)\n    } else {\n      setToken2Amount(e.target.value)\n\n      // Fetch value from chain\n      const _token2Amount = ethers.utils.parseUnits(e.target.value, 'ether')\n      const result = await amm.calculateToken1Deposit(_token2Amount)\n      const _token1Amount = ethers.utils.formatUnits(result.toString(), 'ether')\n\n      setToken1Amount(_token1Amount)\n    }\n  }\n\n  const depositHandler = async (e) => {\n    e.preventDefault()\n\n    setShowAlert(false)\n\n    const _token1Amount = ethers.utils.parseUnits(token1Amount, 'ether')\n    const _token2Amount = ethers.utils.parseUnits(token2Amount, 'ether')\n\n    await addLiquidity(\n      provider,\n      amm,\n      tokens,\n      [_token1Amount, _token2Amount],\n      dispatch\n    )\n\n    await loadBalances(amm, tokens, account, dispatch)\n\n    setShowAlert(true)\n  }\n\n  return (\n    <div>\n      <Card style={{ maxWidth: '450px' }} className='mx-auto px-4'>\n        {account ? (\n          <Form onSubmit={depositHandler} style={{ maxWidth: '450px', margin: '50px auto' }}>\n\n            <Row>\n              <Form.Text className='text-end my-2' muted>\n                Balance: {parseFloat(balances[0]).toFixed(2)}\n              </Form.Text>\n              <InputGroup>\n                <Form.Control\n                  type=\"number\"\n                  placeholder=\"0.0\"\n                  min=\"0.0\"\n                  step=\"any\"\n                  id=\"token1\"\n                  onChange={(e) => amountHandler(e)}\n                  value={token1Amount === 0 ? \"\" : token1Amount}\n                />\n                <InputGroup.Text style={{ width: \"100px\" }} className=\"justify-content-center\">\n                  { symbols && symbols[0] }\n                </InputGroup.Text>\n              </InputGroup>\n            </Row>\n\n            <Row className='my-3'>\n              <Form.Text className='text-end my-2' muted>\n                Balance:  {parseFloat(balances[1]).toFixed(2)}\n              </Form.Text>\n              <InputGroup>\n                <Form.Control\n                  type=\"number\"\n                  placeholder=\"0.0\"\n                  step=\"any\"\n                  id=\"token2\"\n                  onChange={(e) => amountHandler(e)}\n                  value={token2Amount === 0 ? \"\" : token2Amount}\n                />\n                <InputGroup.Text style={{ width: \"100px\" }} className=\"justify-content-center\">\n                  { symbols && symbols[1] }\n                </InputGroup.Text>\n              </InputGroup>\n            </Row>\n\n            <Row className='my-3'>\n              {isDepositing ? (\n                <Spinner animation=\"border\" style={{ display: 'block', margin: '0 auto' }} />\n              ) : (\n                <Button type=\"submit\">Deposit</Button>\n              )}\n            </Row>\n          </Form>\n\n        ) : (\n          <p\n            className='d-flex justify-content-center align-items-center'\n            style={{ height: '300px' }}\n          >\n            Please connect wallet.\n          </p>\n        )}\n      </Card>\n\n      {isDepositing ? (\n        <Alert\n          message={'Deposit Pending...'}\n          transactionHash={null}\n          variant={'info'}\n          setShowAlert={setShowAlert}\n        />\n      ) : isSuccess && showAlert ? (\n        <Alert\n          message={'Deposit Successful'}\n          transactionHash={transactionHash}\n          variant={'success'}\n          setShowAlert={setShowAlert}\n        />\n      ) : !isSuccess && showAlert ? (\n        <Alert\n          message={'Deposit Failed'}\n          transactionHash={null}\n          variant={'danger'}\n          setShowAlert={setShowAlert}\n        />\n      ) : (\n        <></>\n      )}\n\n    </div>\n  );\n}\n\nexport default Deposit;\n","/home/arcturian/amm/src/components/Withdraw.js",["114","115","116"],[],"import { useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport Card from 'react-bootstrap/Card';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Spinner from 'react-bootstrap/Spinner';\nimport { ethers } from 'ethers';\nimport { NumericFormat } from 'react-number-format';\n\nimport Alert from './Alert'\n\nimport {\n  removeLiquidity,\n  loadBalances\n} from '../store/interactions'\n\nconst Withdraw = () => {\n  const [amount, setAmount] = useState(0)\n  const [showAlert, setShowAlert] = useState(false)\n\n  const provider = useSelector(state => state.provider.connection)\n  const account = useSelector(state => state.provider.account)\n\n  const shares = useSelector(state => state.amm.shares)\n  const token1 = useSelector(state => state.amm.token1)\n  const token2 = useSelector(state => state.amm.token2)\n\n  const tokens = useSelector(state => state.tokens.contracts)\n  const balances = useSelector(state => state.tokens.balances)\n\n  const amm = useSelector(state => state.amm.contract)\n  const isWithdrawing = useSelector(state => state.amm.withdrawing.isWithdrawing)\n  const isSuccess = useSelector(state => state.amm.withdrawing.isSuccess)\n  const transactionHash = useSelector(state => state.amm.withdrawing.transactionHash)\n\n  const dispatch = useDispatch()\n\n  const withdrawHandler = async (e) => {\n    e.preventDefault()\n\n    setShowAlert(false)\n\n    const _shares = ethers.utils.parseUnits(amount.toString(), 'ether')\n\n    await removeLiquidity(\n      provider,\n      amm,\n      _shares,\n      dispatch\n    )\n\n    await loadBalances(amm, tokens, account, dispatch)\n\n    setShowAlert(true)\n    setAmount(0)\n  }\n\n  return (\n    <div>\n      <Card style={{ maxWidth: '450px' }} className='mx-auto px-4'>\n        {account ? (\n          <Form onSubmit={withdrawHandler} style={{ maxWidth: '450px', margin: '50px auto' }}>\n\n            <Row>\n              <Form.Text className='text-end my-2' muted>\n                Shares: {parseFloat(shares).toFixed(2)}\n              </Form.Text>\n\n              <InputGroup>\n                <Form.Control\n                  type=\"number\"\n                  placeholder=\"0\"\n                  min=\"0.0\"\n                  step=\"any\"\n                  id=\"shares\"\n                  value={amount === 0 ? \"\" : amount}\n                  onChange={(e) => setAmount(e.target.value)}\n                />\n                <InputGroup.Text style={{ width: \"100px\" }} className=\"justify-content-center\">\n                  Shares\n                </InputGroup.Text>\n              </InputGroup>\n            </Row>\n\n            <Row className='my-3'>\n              {isWithdrawing ? (\n                <Spinner animation=\"border\" style={{ display: 'block', margin: '0 auto' }} />\n              ) : (\n                <Button type=\"submit\">Withdraw</Button>\n              )}\n            </Row>\n\n            <hr />\n\n            <Row>\n              <p><strong>DAPP Balance:</strong> {balances[0]}</p>\n              <p><strong>USD Balance:</strong> {balances[1]}</p>\n            </Row>\n\n          </Form>\n\n        ) : (\n          <p\n            className='d-flex justify-content-center align-items-center'\n            style={{ height: '300px' }}\n          >\n            Please connect wallet.\n          </p>\n        )}\n      </Card>\n\n      {isWithdrawing ? (\n        <Alert\n          message={'Withdraw Pending...'}\n          transactionHash={null}\n          variant={'info'}\n          setShowAlert={setShowAlert}\n        />\n      ) : isSuccess && showAlert ? (\n        <Alert\n          message={'Withdraw Successful'}\n          transactionHash={transactionHash}\n          variant={'success'}\n          setShowAlert={setShowAlert}\n        />\n      ) : !isSuccess && showAlert ? (\n        <Alert\n          message={'Withdraw Failed'}\n          transactionHash={null}\n          variant={'danger'}\n          setShowAlert={setShowAlert}\n        />\n      ) : (\n        <></>\n      )}\n\n    </div>\n  );\n}\n\nexport default Withdraw;\n","/home/arcturian/amm/src/components/Charts.js",[],[],"/home/arcturian/amm/src/store/interactions.js",[],[],"/home/arcturian/amm/src/store/reducers/provider.js",[],[],"/home/arcturian/amm/src/store/reducers/tokens.js",[],[],"/home/arcturian/amm/src/store/reducers/amm.js",[],[],"/home/arcturian/amm/src/components/Alert.js",[],[],"/home/arcturian/amm/src/components/Charts.config.js",[],[],"/home/arcturian/amm/src/components/Loading.js",[],[],"/home/arcturian/amm/src/store/selectors.js",[],[],{"ruleId":"117","severity":1,"message":"118","line":18,"column":8,"nodeType":"119","messageId":"120","endLine":18,"endColumn":17},{"ruleId":"117","severity":1,"message":"121","line":20,"column":8,"nodeType":"119","messageId":"120","endLine":20,"endColumn":11},{"ruleId":"117","severity":1,"message":"122","line":21,"column":8,"nodeType":"119","messageId":"120","endLine":21,"endColumn":11},{"ruleId":"117","severity":1,"message":"123","line":40,"column":10,"nodeType":"119","messageId":"120","endLine":40,"endColumn":22},{"ruleId":"117","severity":1,"message":"124","line":40,"column":24,"nodeType":"119","messageId":"120","endLine":40,"endColumn":39},{"ruleId":"117","severity":1,"message":"125","line":43,"column":10,"nodeType":"119","messageId":"120","endLine":43,"endColumn":15},{"ruleId":"117","severity":1,"message":"126","line":43,"column":17,"nodeType":"119","messageId":"120","endLine":43,"endColumn":25},{"ruleId":"117","severity":1,"message":"127","line":45,"column":10,"nodeType":"119","messageId":"120","endLine":45,"endColumn":13},{"ruleId":"117","severity":1,"message":"128","line":46,"column":10,"nodeType":"119","messageId":"120","endLine":46,"endColumn":14},{"ruleId":"117","severity":1,"message":"129","line":47,"column":10,"nodeType":"119","messageId":"120","endLine":47,"endColumn":15},{"ruleId":"117","severity":1,"message":"130","line":49,"column":10,"nodeType":"119","messageId":"120","endLine":49,"endColumn":22},{"ruleId":"117","severity":1,"message":"131","line":52,"column":10,"nodeType":"119","messageId":"120","endLine":52,"endColumn":21},{"ruleId":"132","severity":1,"message":"133","line":119,"column":6,"nodeType":"134","endLine":119,"endColumn":8,"suggestions":"135"},{"ruleId":"132","severity":1,"message":"136","line":119,"column":6,"nodeType":"134","endLine":119,"endColumn":31,"suggestions":"137"},{"ruleId":"117","severity":1,"message":"138","line":23,"column":10,"nodeType":"119","messageId":"120","endLine":23,"endColumn":21},{"ruleId":"117","severity":1,"message":"139","line":24,"column":10,"nodeType":"119","messageId":"120","endLine":24,"endColumn":21},{"ruleId":"117","severity":1,"message":"140","line":24,"column":23,"nodeType":"119","messageId":"120","endLine":24,"endColumn":37},{"ruleId":"117","severity":1,"message":"141","line":39,"column":9,"nodeType":"119","messageId":"120","endLine":39,"endColumn":27},{"ruleId":"117","severity":1,"message":"142","line":10,"column":10,"nodeType":"119","messageId":"120","endLine":10,"endColumn":23},{"ruleId":"117","severity":1,"message":"143","line":27,"column":9,"nodeType":"119","messageId":"120","endLine":27,"endColumn":15},{"ruleId":"117","severity":1,"message":"144","line":28,"column":9,"nodeType":"119","messageId":"120","endLine":28,"endColumn":15},"no-unused-vars","'ListGroup' is defined but never used.","Identifier","unusedVar","'Col' is defined but never used.","'Row' is defined but never used.","'tokenBalance' is assigned a value but never used.","'setTokenBalance' is assigned a value but never used.","'open1' is assigned a value but never used.","'setOpen1' is assigned a value but never used.","'usd' is assigned a value but never used.","'dapp' is assigned a value but never used.","'apple' is assigned a value but never used.","'dappAppleUSD' is assigned a value but never used.","'usdBalance2' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadBlockchainData'. Either include it or remove the dependency array.","ArrayExpression",["145"],"React Hook useEffect has a missing dependency: 'getPrice'. Either include it or remove the dependency array.",["146"],"'token1Final' is assigned a value but never used.","'token2Final' is assigned a value but never used.","'setToken2Final' is assigned a value but never used.","'loadBlockchainData' is assigned a value but never used.","'NumericFormat' is defined but never used.","'token1' is assigned a value but never used.","'token2' is assigned a value but never used.",{"desc":"147","fix":"148"},{"desc":"149","fix":"150"},"Update the dependencies array to be: [loadBlockchainData]",{"range":"151","text":"152"},"Update the dependencies array to be: [getPrice, inputToken, outputToken]",{"range":"153","text":"154"},[3377,3379],"[loadBlockchainData]",[3507,3532],"[getPrice, inputToken, outputToken]"]
[{"/home/arcturian/amm/src/index.js":"1","/home/arcturian/amm/src/reportWebVitals.js":"2","/home/arcturian/amm/src/components/App.js":"3","/home/arcturian/amm/src/store/store.js":"4","/home/arcturian/amm/src/components/Navigation.js":"5","/home/arcturian/amm/src/components/Swap.js":"6","/home/arcturian/amm/src/components/Tabs.js":"7","/home/arcturian/amm/src/components/Deposit.js":"8","/home/arcturian/amm/src/components/Withdraw.js":"9","/home/arcturian/amm/src/components/Charts.js":"10","/home/arcturian/amm/src/store/interactions.js":"11","/home/arcturian/amm/src/store/reducers/provider.js":"12","/home/arcturian/amm/src/store/reducers/tokens.js":"13","/home/arcturian/amm/src/store/reducers/amm.js":"14","/home/arcturian/amm/src/components/Alert.js":"15","/home/arcturian/amm/src/components/Charts.config.js":"16","/home/arcturian/amm/src/store/selectors.js":"17","/home/arcturian/amm/src/components/Loading.js":"18"},{"size":716,"mtime":1695871684918,"results":"19","hashOfConfig":"20"},{"size":362,"mtime":1695160235541,"results":"21","hashOfConfig":"22"},{"size":13431,"mtime":1696816330223,"results":"23","hashOfConfig":"24"},{"size":363,"mtime":1695160235545,"results":"25","hashOfConfig":"22"},{"size":2757,"mtime":1695160235533,"results":"26","hashOfConfig":"22"},{"size":17378,"mtime":1696808377411,"results":"27","hashOfConfig":"24"},{"size":629,"mtime":1695160235537,"results":"28","hashOfConfig":"22"},{"size":5903,"mtime":1696808746631,"results":"29","hashOfConfig":"24"},{"size":4093,"mtime":1695160235537,"results":"30","hashOfConfig":"22"},{"size":2910,"mtime":1696810239892,"results":"31","hashOfConfig":"24"},{"size":6736,"mtime":1696725519403,"results":"32","hashOfConfig":"24"},{"size":564,"mtime":1695160235541,"results":"33","hashOfConfig":"22"},{"size":589,"mtime":1695856985460,"results":"34","hashOfConfig":"20"},{"size":3009,"mtime":1695856883300,"results":"35","hashOfConfig":"20"},{"size":552,"mtime":1695160235529,"results":"36","hashOfConfig":"22"},{"size":546,"mtime":1695160235533,"results":"37","hashOfConfig":"22"},{"size":1218,"mtime":1695160235541,"results":"38","hashOfConfig":"22"},{"size":269,"mtime":1695160235533,"results":"39","hashOfConfig":"22"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"d7dsnm",{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1g3hscr",{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"zl16v2",{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/arcturian/amm/src/index.js",[],[],"/home/arcturian/amm/src/reportWebVitals.js",[],[],"/home/arcturian/amm/src/components/App.js",["96","97","98","99","100","101","102","103","104","105","106","107","108","109","110"],[],"/home/arcturian/amm/src/store/store.js",[],[],"/home/arcturian/amm/src/components/Navigation.js",[],[],"/home/arcturian/amm/src/components/Swap.js",["111","112"],[],"import { useState, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport Card from 'react-bootstrap/Card';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Spinner from 'react-bootstrap/Spinner';\nimport { ethers } from 'ethers'\n\nimport Alert from './Alert'\n\nimport {\n  swap,\n  loadNetwork,\n  loadTokens,\n  loadAMM,\n  loadBalances,\n  loadAppleUSD,\n  loadDAppApple,\n  loadDappAppleUSD,\n  loadDappDappApple\n\n} from '../store/interactions'\n\nconst Swap = ({ dappAccountBalance, usdAccountBalance, appleAccountBalance, rate1, rate2, rate3 } ) => {\n  const [inputToken, setInputToken] = useState(null)\n  const [outputToken, setOutputToken] = useState(null)\n  const [inputAmount, setInputAmount] = useState(0)\n  const [outputAmount, setOutputAmount] = useState(0)\n\n  const [price, setPrice] = useState(0)\n  const [protocol, setProtocol] = useState(0)\n\n  const [showAlert, setShowAlert] = useState(false)\n\n  const provider = useSelector(state => state.provider.connection)\n  const account = useSelector(state => state.provider.account)\n\n  // Set Chain ID for Network\n    const chainId = useSelector(state => state.provider.chainId)\n    const tokens = useSelector(state => state.tokens.contracts)\n    const symbols = useSelector(state => state.tokens.symbols)\n    const balances = useSelector(state => state.tokens.balances)\n\n    const amm = useSelector(state => state.amm.contract)\n    const isSwapping = useSelector(state => state.amm.swapping.isSwapping)\n    const isSuccess = useSelector(state => state.amm.swapping.isSuccess)\n    const transactionHash = useSelector(state => state.amm.swapping.transactionHash)\n\n    const token1 = useSelector(state => state.amm.token1)\n    const token2 = useSelector(state => state.amm.token2)\n\n    const dispatch = useDispatch()\n\n    const testHandler = async (e) => {\n      console.log(`Token 1 Account Balance: ${parseFloat(balances[0]).toFixed(2)}`)\n      console.log(`Token 2 Account Balance: ${parseFloat(balances[1]).toFixed(2)}`)\n      console.log(`Active AMM Address: ${amm.address}`)\n      console.log(`Active Symbols: ${symbols}`)\n      console.log(`Protocol Number: ${protocol}`)\n      console.log(`Exchange Rate: ${price}`)\n     \n}\n\n  const inputHandler = async (e) => {\n\n    if (e.target.value == 0) {\n      setPrice(0)\n      setOutputAmount(0)\n      return\n    }\n\n    if (!inputToken || !outputToken) {\n      window.alert('Please select token')\n      return\n    }\n\n    if (inputToken === outputToken) {\n      window.alert('Invalid token pair')\n      return\n    }\n\n      await loadBalances(amm, tokens, account, dispatch)\n            if (protocol === 1) {\n              setInputAmount(e.target.value)\n              const _token1Amount = ethers.utils.parseUnits(e.target.value, 'ether')\n              const result = await amm.calculateToken1Swap(_token1Amount)\n              const _token2Amount = ethers.utils.formatUnits(result.toString(), 'ether')\n              setOutputAmount(_token2Amount.toString())\n             } else if (protocol === 2) {\n              setInputAmount(e.target.value)\n              const _token2Amount = ethers.utils.parseUnits(e.target.value, 'ether')\n              const result = await amm.calculateToken2Swap(_token2Amount)\n              const _token1Amount = ethers.utils.formatUnits(result.toString(), 'ether')\n              setOutputAmount(_token1Amount.toString())\n              }\n   \n    /*\n\n    // Handle for (1) - DAPP / USD Pair\n    if ((inputToken === 'DAPP' && outputToken === 'USD') || (inputToken === 'USD' && outputToken === 'DAPP')) {\n      console.log(`DAPP / USD Activated`)\n      await loadBalances(amm, tokens, account, dispatch)\n      console.log(`${await amm.token1Balance()} & ${await amm.token2Balance()}`)\n        if (inputToken === 'DAPP') {\n          setInputAmount(e.target.value)\n          const _token1Amount = ethers.utils.parseUnits(e.target.value, 'ether')\n          const result = await amm.calculateToken1Swap(_token1Amount)\n          const _token2Amount = ethers.utils.formatUnits(result.toString(), 'ether')\n          setOutputAmount(_token2Amount.toString())\n         } else {\n          setInputAmount(e.target.value)\n          const _token2Amount = ethers.utils.parseUnits(e.target.value, 'ether')\n          const result = await amm.calculateToken2Swap(_token2Amount)\n          const _token1Amount = ethers.utils.formatUnits(result.toString(), 'ether')\n          setOutputAmount(_token1Amount.toString())\n          }\n        }\n   \n    // Handle for (2) - APPL / USD Pair\n    if ((inputToken === 'APPL' && outputToken === 'USD') || (inputToken === 'USD' && outputToken === 'APPL')) {\n      console.log(`APPL / USD Activated`)\n      await loadBalances(amm, tokens, account, dispatch)\n      console.log(`${await amm.token1Balance()} & ${await amm.token2Balance()}`)\n        if (inputToken === 'APPL') {\n          setInputAmount(e.target.value)\n          const _token1Amount = ethers.utils.parseUnits(e.target.value, 'ether')\n          const result = await amm.calculateToken1Swap(_token1Amount)\n          const _token2Amount = ethers.utils.formatUnits(result.toString(), 'ether')\n          setOutputAmount(_token2Amount.toString())\n         } else {\n          setInputAmount(e.target.value)\n          const _token2Amount = ethers.utils.parseUnits(e.target.value, 'ether')\n          const result = await amm.calculateToken2Swap(_token2Amount)\n          const _token1Amount = ethers.utils.formatUnits(result.toString(), 'ether')\n          setOutputAmount(_token1Amount.toString())\n          }\n        }\n \n    // Handle for (3) - DAPPL / APPL Pair\n    if ((inputToken === 'DAPP' && outputToken === 'APPL') || (inputToken === 'APPL' && outputToken === 'DAPP')) {\n      console.log(`DAPP / APPL Activated`)\n      await loadBalances(amm, tokens, account, dispatch)\n      console.log(`${await amm.token1Balance()} & ${await amm.token2Balance()}`)\n        if (inputToken === 'DAPP') {\n          setInputAmount(e.target.value)\n          const _token1Amount = ethers.utils.parseUnits(e.target.value, 'ether')\n          const result = await amm.calculateToken1Swap(_token1Amount)\n          const _token2Amount = ethers.utils.formatUnits(result.toString(), 'ether')\n          setOutputAmount(_token2Amount.toString())\n         } else {\n          setInputAmount(e.target.value)\n          const _token2Amount = ethers.utils.parseUnits(e.target.value, 'ether')\n          const result = await amm.calculateToken2Swap(_token2Amount)\n          const _token1Amount = ethers.utils.formatUnits(result.toString(), 'ether')\n          setOutputAmount(_token1Amount.toString())\n          }\n        }\n        console.log(`${amm.address}`)\n\n        */\n  }\n\n  const swapHandler = async (e) => {\n    e.preventDefault()\n    setShowAlert(false)\n\n    if (inputToken === outputToken) {\n      window.alert('Invalid Token Pair')\n      return\n    }\n\n    const _inputAmount = ethers.utils.parseUnits(inputAmount, 'ether')\n    await loadTokens(provider, chainId, dispatch);\n \n    // Swap token depending upon which one we're doing...\n    if (protocol === 1) {\n        await swap(provider, amm, tokens[0], inputToken, outputToken, _inputAmount, dispatch)\n      } else if (protocol === 2) {\n        await swap(provider, amm, tokens[1], inputToken, outputToken, _inputAmount, dispatch)\n    }\n\n    /*\n\n    // Swap token depending upon which one we're doing...\n    if ((inputToken === 'DAPP' && outputToken === 'USD')\n      || (inputToken === 'APPL' && outputToken === 'USD')\n        || (inputToken === 'DAPP' && outputToken === 'APPL')) {\n      await swap(provider, amm, tokens[0], inputToken, outputToken, _inputAmount, dispatch)\n    } else {\n      await swap(provider, amm, tokens[1], inputToken, outputToken, _inputAmount, dispatch)\n    }\n   \n    */\n\n    await loadBalances(amm, tokens, account, dispatch)\n    await getPrice()\n\n    setShowAlert(true)\n  }\n\n  const updatePrice = async () => {\n\n    /*\n\n    if (inputToken === outputToken) {\n      setPrice(0)\n      return\n    }\n\n    if (inputToken === outputToken) {\n      window.alert('Invalid token pair')\n      return\n    }\n \n    await loadBalances(amm, tokens, account, dispatch)\n\n    if ((inputToken === 'DAPP' && outputToken === 'USD') || (inputToken === 'USD' && outputToken === 'DAPP')) {\n      return rate1\n    } else if ((inputToken === 'APPL' && outputToken === 'USD') || (inputToken === 'USD' && outputToken === 'APPL')) {\n      return rate2\n    } else {\n      return rate3\n    }\n\n    */\n\n }\n  const getPrice = async () => {\n    if (inputToken === outputToken) {\n      setPrice(0)\n      return\n    }\n\n    if (inputToken === outputToken) {\n      window.alert('Invalid token pair')\n      return\n    }\n\n    if ((inputToken === 'DAPP' && outputToken === 'USD') ||\n    (inputToken === 'APPL' && outputToken === 'USD') ||\n      (inputToken === 'DAPP' && outputToken === 'APPL'))\n          {\n          setProtocol(1)\n              } else {\n          setProtocol(2)\n              }\n\n    // Fetch current network's chainId (e.g. hardhat: 31337, kovan: 42)\n    const chainId = await loadNetwork(provider, dispatch)\n \n    if ((inputToken === 'DAPP' && outputToken === 'USD') || (inputToken === 'USD' && outputToken === 'DAPP')) {\n        await loadTokens(provider, chainId, dispatch);\n        await loadAMM(provider, chainId, dispatch);\n    } else if ((inputToken === 'APPL' && outputToken === 'USD') || (inputToken === 'USD' && outputToken === 'APPL')) {\n        await loadAppleUSD(provider, chainId, dispatch);\n        await loadDappAppleUSD(provider, chainId, dispatch);\n    } else if ((inputToken === 'DAPP' && outputToken === 'APPL') || (inputToken === 'APPL' && outputToken === 'DAPP')) {\n        await loadDAppApple(provider, chainId, dispatch);\n        await loadDappDappApple(provider, chainId, dispatch);\n    }\n\n      await loadBalances(amm, tokens, account, dispatch);\n\n      if (protocol === 1) {\n        setPrice((token2 / token1))\n      } else if (protocol === 2) {\n        setPrice((token1 / token2))\n      }\n\n/*\n\n\n\n  if ((inputToken === 'DAPP' && outputToken === 'USD') || (inputToken === 'USD' && outputToken === 'DAPP')) {\n    await loadTokens(provider, chainId, dispatch);\n    await loadAMM(provider, chainId, dispatch);\n    await loadBalances(amm, tokens, account, dispatch);\n      if (inputToken === 'DAPP') {\n                setPrice((token2 / token1))\n              } else {\n                setPrice((token1 / token2))\n              }\n            }\n     \n  if ((inputToken === 'APPL' && outputToken === 'USD') || (inputToken === 'USD' && outputToken === 'APPL')) {\n    await loadAppleUSD(provider, chainId, dispatch);\n    await loadDappAppleUSD(provider, chainId, dispatch);\n    await loadBalances(amm, tokens, account, dispatch);\n      if (inputToken === 'APPL') {\n              setPrice((token2 / token1))\n            } else {\n              setPrice((token1 / token2))\n            }\n          }\n     \n  if ((inputToken === 'DAPP' && outputToken === 'APPL') || (inputToken === 'APPL' && outputToken === 'DAPP')) {\n    await loadDAppApple(provider, chainId, dispatch);\n    await loadDappDappApple(provider, chainId, dispatch);\n    await loadBalances(amm, tokens, account, dispatch);\n      if (inputToken === 'DAPP') {\n              setPrice((token2 / token1))\n            } else {\n              setPrice((token1 / token2))\n            }\n          }\n\n      */\n\n  }\n   \n  useEffect(() => {\n    if(inputToken && outputToken) {\n      getPrice();\n    }\n  }, [inputToken, outputToken]);\n\n  return (\n    <div>\n      <Card style={{ maxWidth: '450px' }} className='mx-auto px-4'>\n        {account ? (\n          <Form onSubmit={swapHandler} style={{ maxWidth: '450px', margin: '50px auto' }}>\n            <Row className='my-3'>\n              <div className='d-flex justify-content-between'>\n                <Form.Label><strong>Input:</strong></Form.Label>\n                <Form.Text muted>\n                  Balance: {\n                  inputToken === 'DAPP' ? (\n                    parseFloat(dappAccountBalance).toFixed(2)\n                  ) : inputToken === 'USD' ? (\n                    parseFloat(usdAccountBalance).toFixed(2)\n                  ) : inputToken === 'APPL' ? (\n                    parseFloat(appleAccountBalance).toFixed(2)\n                  ) : 0\n                  }\n                </Form.Text>\n              </div>\n              <InputGroup>\n                <Form.Control\n                  type=\"number\"\n                  placeholder=\"0.0\"\n                  min=\"0.0\"\n                  step=\"any\"\n                  onChange={(e) => inputHandler(e)}\n                  disabled={!inputToken}\n                />\n                <DropdownButton\n                  variant=\"outline-secondary\"\n                  title={inputToken ? inputToken : \"Select Token\"}\n                  onChange={() => updatePrice()}\n                >\n                  <Dropdown.Item onClick={(e) => setInputToken(e.target.innerHTML)} >DAPP</Dropdown.Item>\n                  <Dropdown.Item onClick={(e) => setInputToken(e.target.innerHTML)} >USD</Dropdown.Item>\n                  <Dropdown.Item onClick={(e) => setInputToken(e.target.innerHTML)} >APPL</Dropdown.Item>\n                </DropdownButton>\n              </InputGroup>\n            </Row>\n\n            <Row className='my-4'>\n              <div className='d-flex justify-content-between'>\n                <Form.Label><strong>Output:</strong></Form.Label>\n                <Form.Text muted>\n                  Balance: {\n                    (outputToken) === 'DAPP' ? (\n                      parseFloat(dappAccountBalance).toFixed(2)\n                    ) : outputToken === 'USD' ? (\n                      parseFloat(usdAccountBalance).toFixed(2)\n                    ) : outputToken === 'APPL' ? (\n                      parseFloat(appleAccountBalance).toFixed(2)\n                    ) : 0\n                  }\n                </Form.Text>\n              </div>\n              <InputGroup>\n                <Form.Control\n                  type=\"number\"\n                  placeholder=\"0.0\"\n                  value={outputAmount === 0 ? \"\" : outputAmount }\n                  disabled\n                />\n                <DropdownButton\n                  variant=\"outline-secondary\"\n                  title={outputToken ? outputToken : \"Select Token\"}\n                  onChange={() => updatePrice()}\n                >\n                  <Dropdown.Item onClick={(e) => setOutputToken(e.target.innerHTML)}>DAPP</Dropdown.Item>\n                  <Dropdown.Item onClick={(e) => setOutputToken(e.target.innerHTML)}>USD</Dropdown.Item>\n                  <Dropdown.Item onClick={(e) => setOutputToken(e.target.innerHTML)}>APPL</Dropdown.Item>\n                </DropdownButton>\n              </InputGroup>\n            </Row>\n\n            <Row className='my-3'>\n              {isSwapping ? (\n                <Spinner animation=\"border\" style={{ display: 'block', margin: '0 auto' }} />\n              ): (\n                <Button type='submit'>Swap</Button>\n              )}\n\n              <Form.Text muted>\n                Exchange Rate: {\n                    inputToken === 'DAPP' && outputToken === 'USD' ? (\n                        parseFloat(rate1).toFixed(4)\n                    ) : inputToken === 'USD' && outputToken === 'DAPP' ? (\n                        parseFloat((1 / rate1)).toFixed(4)\n                     )  : inputToken === 'APPL' && outputToken === 'USD' ? (\n                          parseFloat(rate2).toFixed(4)\n                      ) : inputToken === 'USD' && outputToken === 'APPL' ? (\n                          parseFloat((1 / rate2)).toFixed(4)\n                       ) : inputToken === 'DAPP' && outputToken === 'APPL' ? (\n                            parseFloat(rate3).toFixed(4)\n                        ) : inputToken === 'APPL' && outputToken === 'DAPP' ? (\n                            parseFloat((1 / rate3)).toFixed(4)\n                    ) : 0\n                  }\n              </Form.Text>\n            </Row>\n\n          </Form>\n\n        ) : (\n          <p\n            className='d-flex justify-content-center align-items-center'\n            style={{ height: '300px' }}\n          >\n            Please connect wallet.\n          </p>\n        )}\n      </Card>\n\n              <p>\n                <Button\n                  variant=\"primary\"\n                  style={{ width: '20%' }}\n                  onClick={() => testHandler()}\n                  >\n                  Show T1 / T2 Account Balances\n                </Button>\n              </p>\n\n      {isSwapping ? (\n        <Alert\n          message={'Swap Pending...'}\n          transactionHash={null}\n          variant={'info'}\n          setShowAlert={setShowAlert}\n        />\n      ) : isSuccess && showAlert ? (\n        <Alert\n          message={'Swap Successful'}\n          transactionHash={transactionHash}\n          variant={'success'}\n          setShowAlert={setShowAlert}\n        />\n      ) : !isSuccess && showAlert ? (\n        <Alert\n          message={'Swap Failed'}\n          transactionHash={null}\n          variant={'danger'}\n          setShowAlert={setShowAlert}\n        />\n      ) : (\n        <></>\n      )}\n\n    </div>\n  );\n}\n\nexport default Swap;\n",[],"/home/arcturian/amm/src/components/Tabs.js",[],[],"/home/arcturian/amm/src/components/Deposit.js",["113","114","115","116","117","118","119"],[],"/home/arcturian/amm/src/components/Withdraw.js",["120","121","122"],[],"/home/arcturian/amm/src/components/Charts.js",[],[],"/home/arcturian/amm/src/store/interactions.js",[],[],"/home/arcturian/amm/src/store/reducers/provider.js",[],[],"/home/arcturian/amm/src/store/reducers/tokens.js",[],[],"/home/arcturian/amm/src/store/reducers/amm.js",[],[],"/home/arcturian/amm/src/components/Alert.js",[],[],"/home/arcturian/amm/src/components/Charts.config.js",[],[],"/home/arcturian/amm/src/store/selectors.js",[],[],"/home/arcturian/amm/src/components/Loading.js",[],[],{"ruleId":"123","severity":1,"message":"124","line":33,"column":8,"nodeType":"125","messageId":"126","endLine":33,"endColumn":16},{"ruleId":"123","severity":1,"message":"127","line":34,"column":8,"nodeType":"125","messageId":"126","endLine":34,"endColumn":15},{"ruleId":"123","severity":1,"message":"128","line":35,"column":8,"nodeType":"125","messageId":"126","endLine":35,"endColumn":16},{"ruleId":"123","severity":1,"message":"129","line":36,"column":8,"nodeType":"125","messageId":"126","endLine":36,"endColumn":15},{"ruleId":"123","severity":1,"message":"130","line":37,"column":8,"nodeType":"125","messageId":"126","endLine":37,"endColumn":17},{"ruleId":"123","severity":1,"message":"131","line":58,"column":10,"nodeType":"125","messageId":"126","endLine":58,"endColumn":13},{"ruleId":"123","severity":1,"message":"132","line":59,"column":10,"nodeType":"125","messageId":"126","endLine":59,"endColumn":14},{"ruleId":"123","severity":1,"message":"133","line":60,"column":10,"nodeType":"125","messageId":"126","endLine":60,"endColumn":15},{"ruleId":"123","severity":1,"message":"134","line":73,"column":12,"nodeType":"125","messageId":"126","endLine":73,"endColumn":15},{"ruleId":"123","severity":1,"message":"135","line":76,"column":12,"nodeType":"125","messageId":"126","endLine":76,"endColumn":24},{"ruleId":"123","severity":1,"message":"136","line":79,"column":12,"nodeType":"125","messageId":"126","endLine":79,"endColumn":25},{"ruleId":"123","severity":1,"message":"137","line":82,"column":11,"nodeType":"125","messageId":"126","endLine":82,"endColumn":18},{"ruleId":"123","severity":1,"message":"138","line":83,"column":11,"nodeType":"125","messageId":"126","endLine":83,"endColumn":19},{"ruleId":"123","severity":1,"message":"139","line":85,"column":12,"nodeType":"125","messageId":"126","endLine":85,"endColumn":19},{"ruleId":"140","severity":1,"message":"141","line":202,"column":6,"nodeType":"142","endLine":202,"endColumn":8,"suggestions":"143"},{"ruleId":"144","severity":1,"message":"145","line":70,"column":24,"nodeType":"146","messageId":"147","endLine":70,"endColumn":26},{"ruleId":"140","severity":1,"message":"148","line":319,"column":6,"nodeType":"142","endLine":319,"endColumn":31,"suggestions":"149"},{"ruleId":"123","severity":1,"message":"150","line":23,"column":10,"nodeType":"125","messageId":"126","endLine":23,"endColumn":21},{"ruleId":"123","severity":1,"message":"151","line":24,"column":10,"nodeType":"125","messageId":"126","endLine":24,"endColumn":21},{"ruleId":"123","severity":1,"message":"152","line":24,"column":23,"nodeType":"125","messageId":"126","endLine":24,"endColumn":37},{"ruleId":"123","severity":1,"message":"153","line":26,"column":10,"nodeType":"125","messageId":"126","endLine":26,"endColumn":15},{"ruleId":"123","severity":1,"message":"154","line":26,"column":17,"nodeType":"125","messageId":"126","endLine":26,"endColumn":25},{"ruleId":"123","severity":1,"message":"155","line":41,"column":9,"nodeType":"125","messageId":"126","endLine":41,"endColumn":27},{"ruleId":"144","severity":1,"message":"145","line":52,"column":24,"nodeType":"146","messageId":"147","endLine":52,"endColumn":26},{"ruleId":"123","severity":1,"message":"156","line":10,"column":10,"nodeType":"125","messageId":"126","endLine":10,"endColumn":23},{"ruleId":"123","severity":1,"message":"157","line":27,"column":9,"nodeType":"125","messageId":"126","endLine":27,"endColumn":15},{"ruleId":"123","severity":1,"message":"158","line":28,"column":9,"nodeType":"125","messageId":"126","endLine":28,"endColumn":15},"no-unused-vars","'wethIcon' is defined but never used.","Identifier","unusedVar","'daiIcon' is defined but never used.","'dappIcon' is defined but never used.","'usdIcon' is defined but never used.","'appleIcon' is defined but never used.","'usd' is assigned a value but never used.","'dapp' is assigned a value but never used.","'apple' is assigned a value but never used.","'amm' is assigned a value but never used.","'dappAppleUSD' is assigned a value but never used.","'dappDappApple' is assigned a value but never used.","'poolDAI' is assigned a value but never used.","'poolWETH' is assigned a value but never used.","'account' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadBlockchainData'. Either include it or remove the dependency array.","ArrayExpression",["159"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'getPrice'. Either include it or remove the dependency array.",["160"],"'token1Final' is assigned a value but never used.","'token2Final' is assigned a value but never used.","'setToken2Final' is assigned a value but never used.","'price' is assigned a value but never used.","'setPrice' is assigned a value but never used.","'loadBlockchainData' is assigned a value but never used.","'NumericFormat' is defined but never used.","'token1' is assigned a value but never used.","'token2' is assigned a value but never used.",{"desc":"161","fix":"162"},{"desc":"163","fix":"164"},"Update the dependencies array to be: [loadBlockchainData]",{"range":"165","text":"166"},"Update the dependencies array to be: [getPrice, inputToken, outputToken]",{"range":"167","text":"168"},[6754,6756],"[loadBlockchainData]",[11669,11694],"[getPrice, inputToken, outputToken]"]